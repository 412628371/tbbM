<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/rabbit
		http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd"
       default-lazy-init="true">

    <bean id="rabbitmqConnectionFactory"  class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg value="localhost" />
        <property name="username" value="${rabbitmq.username}" />
        <property name="password" value="${rabbitmq.password}" />
        <property name="addresses" value="${rabbitmq.address}" />
        <property name="virtualHost" value="${rabbitmq.virtualHost}" />
        <property name="channelCacheSize" value="${rabbitmq.channelCacheSize}" />
    </bean>

    <bean id="rabbitAdmin"  class="org.springframework.amqp.rabbit.core.RabbitAdmin">
        <constructor-arg ref="rabbitmqConnectionFactory" />
    </bean>
    <!-- 创建rabbitTemplate 消息模板类 -->
    <rabbit:template id="delayMsgTemplate" connection-factory="rabbitmqConnectionFactory"  exchange="trade_direct" />


    <!--&lt;!&ndash; queue 队列声明&ndash;&gt;-->
    <!--<rabbit:queue id="queue_one" durable="true" auto-delete="false" exclusive="false" name="queue_one" auto-declare="true"/>-->


    <!--&lt;!&ndash; exchange queue binging key 绑定 &ndash;&gt;-->
    <!--<rabbit:direct-exchange name="my-mq-exchange" durable="true" auto-delete="false" id="my-mq-exchange"-->
                            <!--auto-declare="true" declared-by="rabbitAdmin">-->
        <!--<rabbit:bindings>-->
            <!--<rabbit:binding queue="queue_one" key="queue_one_key"/>-->
        <!--</rabbit:bindings>-->
    <!--</rabbit:direct-exchange>-->


    <!--&lt;!&ndash; queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象&ndash;&gt;-->
    <!--<rabbit:listener-container connection-factory="rabbitmqConnectionFactory" acknowledge="auto" >-->
        <!--<rabbit:listener queues="queue_one" ref="payTimeoutHandler"/>-->
    <!--</rabbit:listener-container>-->
    <!--&lt;!&ndash; 监听处理器 &ndash;&gt;-->

    <!-- 队列声明 -->
    <rabbit:queue id="queue_TestNotify" name="queue_TestNotify" durable="true" auto-delete="false" exclusive="false">
        <rabbit:queue-arguments>
            <entry key="x-dead-letter-exchange" value="trade_direct"/>
            <entry key="x-dead-letter-routing-key" value="routeKey_TradePayNotify_delay_15s"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!-- 监听处理器 -->

    <!-- 监听器acknowledge=manual表示手工确认消息已处理（异常时可以不确认消息），auto表示自动确认（只要不抛出异常，消息就会被消费） -->
    <rabbit:listener-container connection-factory="rabbitmqConnectionFactory" acknowledge="manual">
        <rabbit:listener queues="queue_TestNotify" ref="payTimeoutHandler" method="onMessage"/>
    </rabbit:listener-container>


    <!-- ################ 延迟队列生产者配置 ################ -->
    <rabbit:admin connection-factory="rabbitmqConnectionFactory" />
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory" exchange="trade_direct" />

    <rabbit:queue id="queue_TestNotify_delay_15s" name="queue_TestNotify_delay_15s" durable="true" auto-delete="false" exclusive="false">
        <rabbit:queue-arguments>
            <entry key="x-message-ttl" value="${merchant.pay.expired.milliseconds}" value-type="java.lang.Long"/>
            <entry key="x-dead-letter-exchange" value="trade_direct"/>
            <entry key="x-dead-letter-routing-key" value="routeKey_TradePayNotify"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!-- work exchange -->
    <rabbit:direct-exchange name="trade_direct" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="queue_TestNotify" key="routeKey_TradePayNotify"/>
            <rabbit:binding queue="queue_TestNotify_delay_15s" key="routeKey_TradePayNotify_delay_15s"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>


    <bean id="payTimeoutHandler" class="com.xinguang.tubobo.impl.merchant.handler.OrderPayTimeoutHandler"></bean>

    <!-- 延迟消息start -->
    <!--<rabbit:topic-exchange name="tubobo_merchant_payTimeout_delay_exchange" delayed="true">-->
        <!--<rabbit:bindings>-->
            <!--<rabbit:binding queue="tubobo_merchant_payTimeout_delayQueue" pattern="merchant.pay.delay.notify" />-->
        <!--</rabbit:bindings>-->
    <!--</rabbit:topic-exchange>-->
    <!--<rabbit:queue name="tubobo_merchant_payTimeout_delayQueue" durable="true" auto-declare="true" auto-delete="false" />-->
    <!--<rabbit:template id="delayMsgTemplate" connection-factory="rabbitmqConnectionFactory"  exchange="tubobo_merchant_payTimeout_delay_exchange" />-->
    <!--<rabbit:listener-container-->
            <!--connection-factory="rabbitmqConnectionFactory"-->
            <!--acknowledge="manual"-->
            <!--channel-transacted="false">-->
        <!--<rabbit:listener queues="tubobo_merchant_payTimeout_delayQueue"-->
                         <!--ref="payTimeoutHandler"  method="onMessage"/>-->
    <!--</rabbit:listener-container>-->
    <!-- 延时消息end  -->
    </beans>