<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
	   default-lazy-init="true">

	<description>Spring Configuration</description>

	<import resource="spring-disconf.xml" />
	<import resource="rabbitmq-callback.xml"/>
	<import resource="rabbitmq-takeout.xml"/>
	<import resource="rabbitmq-delay.xml"/>
	<import resource="rabbitmq-notice.xml"/>
	<import resource="rabbitmq-biz.xml"/>
	<import resource="spring-dubbo-consumer.xml"/>
	<import resource="spring-dubbo-provider.xml"/>
	<import resource="spring-jobCenter.xml"/>
	<import resource="spring-redis.xml" />
    <!-- 加载配置属性文件 -->
	<!--<context:property-placeholder ignore-unresolvable="true" location="classpath*:/hzcms.properties" />-->
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
<!--	<context:component-scan base-package="com.hzmux.hzcms,com.xinguang.tubobo.impl.merchant">&lt;!&ndash; base-package 如果多个，用“,”分隔 &ndash;&gt;
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>-->

	<!--&lt;!&ndash; 定义Hibernate Session工厂 &ndash;&gt;
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource"/>
		<property name="packagesToScan" value="com.xinguang.tubobo.impl.merchant"/>&lt;!&ndash; 如果多个，用“,”分隔 &ndash;&gt;
		<property name="hibernateProperties">
			<props>
				&lt;!&ndash;<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>&ndash;&gt;
				&lt;!&ndash;<prop key="net.sf.ehcache.configurationResourceName">${hibernate.ehcache.configFile}</prop>&ndash;&gt;
			<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.search.default.directory_provider">filesystem</prop>
				<prop key="hibernate.search.default.indexBase">${hibernate.search.default.indexBase}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
	</bean>-->
       
<!--
	&lt;!&ndash; 定义事务 &ndash;&gt;
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
    
	&lt;!&ndash; 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  &ndash;&gt;
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	&lt;!&ndash; 配置 JSR303 Bean Validator 定义 &ndash;&gt;
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
-->

	<!-- 缓存配置 -->
	<!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
		<!--<property name="configLocation" value="classpath:${ehcache.configFile}" />-->
	<!--</bean>-->
	<bean id="pushService" class="com.xinguang.tubobo.push.impl.PushServiceImpl">
		<constructor-arg index="0" value="${ali.push.region.id}"/>
		<constructor-arg index="1" value="${ali.push.access.key.id}"/>
		<constructor-arg index="2" value="${ali.push.access.key.secret}"/>
		<constructor-arg index="3" value="${iosApnsEnv}"/>
	</bean>
	<bean id="gdDistanceService" class="com.xinguang.tubobo.lbs.impl.GdDistanceServiceImpl">
		<constructor-arg index="0" value="${gdKey}"/>
	</bean>

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		&lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;
		<property name="driverClassName" value="${jdbc.driver}" />

		&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
		<property name="initialSize" value="${jdbc.pool.minIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
		<property name="maxWait" value="600000" />

		&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 TODO 60000&ndash;&gt;
		<property name="timeBetweenEvictionRunsMillis" value="600000" />
		&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
		<property name="minEvictableIdleTimeMillis" value="600000" />

		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />

		<property name="testOnBorrow" value="true" />

		<property name="testOnReturn" value="true" />





		&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> &ndash;&gt;

		&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
		<property name="filters" value="stat" />
	</bean>-->
	<!-- Production 环境 -->
 	<!--<beans profile="production">-->
 		<!---->
		<!--&lt;!&ndash; 数据源配置, 使用应用服务器的数据库连接池 -->
		<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/hzcms" />&ndash;&gt;-->
	<!---->
		<!--&lt;!&ndash; 数据源配置, 不使用连接池 -->
		<!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
			<!--<property name="driverClassName" value="${jdbc.driver}" />-->
			<!--<property name="url" value="${jdbc.url}" />-->
			<!--<property name="username" value="${jdbc.username}"/>-->
			<!--<property name="password" value="${jdbc.password}"/>-->
		<!--</bean>&ndash;&gt;-->
		<!---->
	<!--</beans>-->





</beans>